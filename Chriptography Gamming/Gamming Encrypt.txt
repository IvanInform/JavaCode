package cryptography;
import java.io.BufferedReader;
import sun.misc.BASE64Decoder;
import sun.misc.BASE64Encoder;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintStream;
import java.nio.charset.Charset;
import java.nio.charset.StandardCharsets;
import java.util.ArrayList;
 class StringXORer {
    
private final Charset UTF8_CHARSET = Charset.forName("UTF-8");
    public String encode(String s, String key) {
        
        return base64Encode(xorWithKey(s.getBytes(), key.getBytes()));
         }

    public String decode(String s, String key) {
        return new String(xorWithKey(base64Decode(s), key.getBytes()));

    }

    private byte[] xorWithKey(byte [] a, byte [] key) {
        byte[] out = new byte[a.length];
       
        for (int i = 0; i < a.length; i++) {
            out[i] = (byte) (a[i] ^ key[i%key.length]);
        }
      return out;
    }

    private byte[] base64Decode(String s) {
        try {
            BASE64Decoder d = new BASE64Decoder();
            return d.decodeBuffer(s);
        } catch (IOException e) {throw new RuntimeException(e);}
    }

    private String base64Encode(byte[] bytes) {
        BASE64Encoder enc = new BASE64Encoder();
        return enc.encode(bytes).replaceAll("\\s", "");

    }
}
public class Cryptography {
    public static void decrypt(StringXORer stringxorer)throws FileNotFoundException, IOException{
          BufferedReader in = null;
FileReader key_input=null;
char buff[]=new char[100];
char key_buff[]=new char[100];
StringBuffer key_str=new StringBuffer("");
StringBuffer str=new StringBuffer ("");
try {
    
          key_input=new FileReader("key.txt");
          in = new BufferedReader(new FileReader("output.txt"));
             String temp=new String("");
            while ((temp=in.readLine())!=null){
                str.append(temp);
            }   
            while (key_input.read(key_buff)!=-1){
              key_str.append(key_buff);
                        }
 String encrypted=stringxorer.decode(str.toString(),key_str.toString().trim());
             System.out.println(encrypted);
      }finally {
             
        if (in!=null){
         in.close();
         }
         if (key_input!=null){
         key_input.close();
         }
            }       
    }    
public static void encrypt(StringXORer stringxorer)throws FileNotFoundException, IOException{
BufferedReader in = null;
FileReader key_input=null;
FileWriter out = null;
char buff[]=new char[100];
char key_buff[]=new char[100];
StringBuffer key_str=new StringBuffer("");
 str=new StringBuffer ("");
try {
    
         key_input=new FileReader("key.txt");
         in = new BufferedReader(new FileReader("input.txt"));
         out = new FileWriter("output.txt");
       String temp=new String("");
            while ((temp=in.readLine())!=null){
                str.append(temp);
      
            }   
            System.out.println(str.toString());
            while (key_input.read(key_buff)!=-1){
              key_str.append(key_buff);
            
            }
      
            String encrypted=stringxorer.encode(str.toString(),key_str.toString().trim());
           out.write(encrypted);
           out.flush();

      }finally {
             
         if (out != null) {
            out.close();
                    } 
         if (in!=null){
         in.close();
         }
         if (key_input!=null){
         key_input.close();
         }
         
      }

}
    public static void main(String[] args) throws IOException  {

          StringXORer stringxorer=new StringXORer();
        
System.out.println("Выберите действие: закодировать нажмите <1>");
System.out.println("раскодировать: нажмите <2>...");
InputStreamReader cin=new InputStreamReader(System.in);
char target;
target=(char)cin.read();
switch(target){
    case '1':
        encrypt(stringxorer);
        break;
    case '2':
        decrypt(stringxorer);
        break;
    default:
        System.out.println("Wrong choice...");
break;
}
   }   
}
